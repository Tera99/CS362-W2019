        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:8
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:
        -:    9:
      120:   10:int compare(const void* a, const void* b) {
      120:   11:  if (*(int*)a > *(int*)b)
    #####:   12:    return 1;
      120:   13:  if (*(int*)a < *(int*)b)
       32:   14:    return -1;
       88:   15:  return 0;
        -:   16:}
        -:   17:
    #####:   18:struct gameState* newGame() {
    #####:   19:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   20:  return g;
        -:   21:}
        -:   22:
    #####:   23:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   24:		  int k8, int k9, int k10) {
    #####:   25:  int* k = malloc(10 * sizeof(int));
    #####:   26:  k[0] = k1;
    #####:   27:  k[1] = k2;
    #####:   28:  k[2] = k3;
    #####:   29:  k[3] = k4;
    #####:   30:  k[4] = k5;
    #####:   31:  k[5] = k6;
    #####:   32:  k[6] = k7;
    #####:   33:  k[7] = k8;
    #####:   34:  k[8] = k9;
    #####:   35:  k[9] = k10;
    #####:   36:  return k;
        -:   37:}
        -:   38:
        4:   39:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   40:		   struct gameState *state) {
        -:   41:
        -:   42:  int i;
        -:   43:  int j;
        -:   44:  int it;
        -:   45:  //set up random number generator
        4:   46:  SelectStream(1);
        4:   47:  PutSeed((long)randomSeed);
        -:   48:
        -:   49:  //check number of players
        4:   50:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   51:    {
    #####:   52:      return -1;
        -:   53:    }
        -:   54:
        -:   55:  //set number of players
        4:   56:  state->numPlayers = numPlayers;
        -:   57:
        -:   58:  //check selected kingdom cards are different
       44:   59:  for (i = 0; i < 10; i++)
        -:   60:    {
      440:   61:      for (j = 0; j < 10; j++)
        -:   62:        {
      400:   63:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   64:	    {
    #####:   65:	      return -1;
        -:   66:	    }
        -:   67:        }
        -:   68:    }
        -:   69:
        -:   70:
        -:   71:  //initialize supply
        -:   72:  ///////////////////////////////
        -:   73:
        -:   74:  //set number of Curse cards
        4:   75:  if (numPlayers == 2)
        -:   76:    {
        4:   77:      state->supplyCount[curse] = 10;
        -:   78:    }
    #####:   79:  else if (numPlayers == 3)
        -:   80:    {
    #####:   81:      state->supplyCount[curse] = 20;
        -:   82:    }
        -:   83:  else
        -:   84:    {
    #####:   85:      state->supplyCount[curse] = 30;
        -:   86:    }
        -:   87:
        -:   88:  //set number of Victory cards
        4:   89:  if (numPlayers == 2)
        -:   90:    {
        4:   91:      state->supplyCount[estate] = 8;
        4:   92:      state->supplyCount[duchy] = 8;
        4:   93:      state->supplyCount[province] = 8;
        -:   94:    }
        -:   95:  else
        -:   96:    {
    #####:   97:      state->supplyCount[estate] = 12;
    #####:   98:      state->supplyCount[duchy] = 12;
    #####:   99:      state->supplyCount[province] = 12;
        -:  100:    }
        -:  101:
        -:  102:  //set number of Treasure cards
        4:  103:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        4:  104:  state->supplyCount[silver] = 40;
        4:  105:  state->supplyCount[gold] = 30;
        -:  106:
        -:  107:  //set number of Kingdom cards
       84:  108:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  109:    {
      660:  110:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  111:	{
      620:  112:	  if (kingdomCards[j] == i)
        -:  113:	    {
        -:  114:	      //check if card is a 'Victory' Kingdom card
       40:  115:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  116:		{
    #####:  117:		  if (numPlayers == 2){
    #####:  118:		    state->supplyCount[i] = 8;
        -:  119:		  }
    #####:  120:		  else{ state->supplyCount[i] = 12; }
        -:  121:		}
        -:  122:	      else
        -:  123:		{
       40:  124:		  state->supplyCount[i] = 10;
        -:  125:		}
       40:  126:	      break;
        -:  127:	    }
        -:  128:	  else    //card is not in the set choosen for the game
        -:  129:	    {
      580:  130:	      state->supplyCount[i] = -1;
        -:  131:	    }
        -:  132:	}
        -:  133:
        -:  134:    }
        -:  135:
        -:  136:  ////////////////////////
        -:  137:  //supply intilization complete
        -:  138:
        -:  139:  //set player decks
       12:  140:  for (i = 0; i < numPlayers; i++)
        -:  141:    {
        8:  142:      state->deckCount[i] = 0;
       32:  143:      for (j = 0; j < 3; j++)
        -:  144:	{
       24:  145:	  state->deck[i][j] = estate;
       24:  146:	  state->deckCount[i]++;
        -:  147:	}
       64:  148:      for (j = 3; j < 10; j++)
        -:  149:	{
       56:  150:	  state->deck[i][j] = copper;
       56:  151:	  state->deckCount[i]++;
        -:  152:	}
        -:  153:    }
        -:  154:
        -:  155:  //shuffle player decks
       12:  156:  for (i = 0; i < numPlayers; i++)
        -:  157:    {
        8:  158:      if ( shuffle(i, state) < 0 )
        -:  159:	{
    #####:  160:	  return -1;
        -:  161:	}
        -:  162:    }
        -:  163:
        -:  164:  //draw player hands
       12:  165:  for (i = 0; i < numPlayers; i++)
        -:  166:    {
        -:  167:      //initialize hand size to zero
        8:  168:      state->handCount[i] = 0;
        8:  169:      state->discardCount[i] = 0;
        -:  170:      //draw 5 cards
        -:  171:      // for (j = 0; j < 5; j++)
        -:  172:      //	{
        -:  173:      //	  drawCard(i, state);
        -:  174:      //	}
        -:  175:    }
        -:  176:
        -:  177:  //set embargo tokens to 0 for all supply piles
      112:  178:  for (i = 0; i <= treasure_map; i++)
        -:  179:    {
      108:  180:      state->embargoTokens[i] = 0;
        -:  181:    }
        -:  182:
        -:  183:  //initialize first player's turn
        4:  184:  state->outpostPlayed = 0;
        4:  185:  state->phase = 0;
        4:  186:  state->numActions = 1;
        4:  187:  state->numBuys = 1;
        4:  188:  state->playedCardCount = 0;
        4:  189:  state->whoseTurn = 0;
        4:  190:  state->handCount[state->whoseTurn] = 0;
        -:  191:  //int it; move to top
        -:  192:
        -:  193:  //Moved draw cards to here, only drawing at the start of a turn
       24:  194:  for (it = 0; it < 5; it++){
       20:  195:    drawCard(state->whoseTurn, state);
        -:  196:  }
        -:  197:
        4:  198:  updateCoins(state->whoseTurn, state, 0);
        -:  199:
        4:  200:  return 0;
        -:  201:}
        -:  202:
        8:  203:int shuffle(int player, struct gameState *state) {
        -:  204:
        -:  205:
        -:  206:  int newDeck[MAX_DECK];
        8:  207:  int newDeckPos = 0;
        -:  208:  int card;
        -:  209:  int i;
        -:  210:
        8:  211:  if (state->deckCount[player] < 1)
    #####:  212:    return -1;
        8:  213:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  214:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  215:
       96:  216:  while (state->deckCount[player] > 0) {
       80:  217:    card = floor(Random() * state->deckCount[player]);
       80:  218:    newDeck[newDeckPos] = state->deck[player][card];
       80:  219:    newDeckPos++;
      280:  220:    for (i = card; i < state->deckCount[player]-1; i++) {
      200:  221:      state->deck[player][i] = state->deck[player][i+1];
        -:  222:    }
       80:  223:    state->deckCount[player]--;
        -:  224:  }
       88:  225:  for (i = 0; i < newDeckPos; i++) {
       80:  226:    state->deck[player][i] = newDeck[i];
       80:  227:    state->deckCount[player]++;
        -:  228:  }
        -:  229:
        8:  230:  return 0;
        -:  231:}
        -:  232:
    #####:  233:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  234:{
        -:  235:  int card;
    #####:  236:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  237:
        -:  238:  //check if it is the right phase
    #####:  239:  if (state->phase != 0)
        -:  240:    {
    #####:  241:      return -1;
        -:  242:    }
        -:  243:
        -:  244:  //check if player has enough actions
    #####:  245:  if ( state->numActions < 1 )
        -:  246:    {
    #####:  247:      return -1;
        -:  248:    }
        -:  249:
        -:  250:  //get card played
    #####:  251:  card = handCard(handPos, state);
        -:  252:
        -:  253:  //check if selected card is an action
    #####:  254:  if ( card < adventurer || card > treasure_map )
        -:  255:    {
    #####:  256:      return -1;
        -:  257:    }
        -:  258:
        -:  259:  //play card
    #####:  260:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  261:    {
    #####:  262:      return -1;
        -:  263:    }
        -:  264:
        -:  265:  //reduce number of actions
    #####:  266:  state->numActions--;
        -:  267:
        -:  268:  //update coins (Treasure cards may be added with card draws)
    #####:  269:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  270:
    #####:  271:  return 0;
        -:  272:}
        -:  273:
    #####:  274:int buyCard(int supplyPos, struct gameState *state) {
        -:  275:  int who;
        -:  276:  if (DEBUG){
        -:  277:    printf("Entering buyCard...\n");
        -:  278:  }
        -:  279:
        -:  280:  // I don't know what to do about the phase thing.
        -:  281:
    #####:  282:  who = state->whoseTurn;
        -:  283:
    #####:  284:  if (state->numBuys < 1){
        -:  285:    if (DEBUG)
        -:  286:      printf("You do not have any buys left\n");
    #####:  287:    return -1;
    #####:  288:  } else if (supplyCount(supplyPos, state) <1){
        -:  289:    if (DEBUG)
        -:  290:      printf("There are not any of that type of card left\n");
    #####:  291:    return -1;
    #####:  292:  } else if (state->coins < getCost(supplyPos)){
        -:  293:    if (DEBUG)
        -:  294:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  295:    return -1;
        -:  296:  } else {
    #####:  297:    state->phase=1;
        -:  298:    //state->supplyCount[supplyPos]--;
    #####:  299:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  300:
    #####:  301:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  302:    state->numBuys--;
        -:  303:    if (DEBUG)
        -:  304:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  305:  }
        -:  306:
        -:  307:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  308:  //state->discardCount[who]++;
        -:  309:
    #####:  310:  return 0;
        -:  311:}
        -:  312:
    #####:  313:int numHandCards(struct gameState *state) {
    #####:  314:  return state->handCount[ whoseTurn(state) ];
        -:  315:}
        -:  316:
    #####:  317:int handCard(int handPos, struct gameState *state) {
    #####:  318:  int currentPlayer = whoseTurn(state);
    #####:  319:  return state->hand[currentPlayer][handPos];
        -:  320:}
        -:  321:
        5:  322:int supplyCount(int card, struct gameState *state) {
        5:  323:  return state->supplyCount[card];
        -:  324:}
        -:  325:
        1:  326:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  327:  int i;
        1:  328:  int count = 0;
        -:  329:
        1:  330:  for (i = 0; i < state->deckCount[player]; i++)
        -:  331:    {
    #####:  332:      if (state->deck[player][i] == card) count++;
        -:  333:    }
        -:  334:
       12:  335:  for (i = 0; i < state->handCount[player]; i++)
        -:  336:    {
       11:  337:      if (state->hand[player][i] == card) count++;
        -:  338:    }
        -:  339:
        1:  340:  for (i = 0; i < state->discardCount[player]; i++)
        -:  341:    {
    #####:  342:      if (state->discard[player][i] == card) count++;
        -:  343:    }
        -:  344:
        1:  345:  return count;
        -:  346:}
        -:  347:
       15:  348:int whoseTurn(struct gameState *state) {
       15:  349:  return state->whoseTurn;
        -:  350:}
        -:  351:
    #####:  352:int endTurn(struct gameState *state) {
        -:  353:  int k;
        -:  354:  int i;
    #####:  355:  int currentPlayer = whoseTurn(state);
        -:  356:
        -:  357:  //Discard hand
    #####:  358:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  359:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  360:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  361:  }
    #####:  362:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  363:
        -:  364:  //Code for determining the player
    #####:  365:  if (currentPlayer < (state->numPlayers - 1)){
    #####:  366:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  367:  }
        -:  368:  else{
    #####:  369:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  370:  }
        -:  371:
    #####:  372:  state->outpostPlayed = 0;
    #####:  373:  state->phase = 0;
    #####:  374:  state->numActions = 1;
    #####:  375:  state->coins = 0;
    #####:  376:  state->numBuys = 1;
    #####:  377:  state->playedCardCount = 0;
    #####:  378:  state->handCount[state->whoseTurn] = 0;
        -:  379:
        -:  380:  //int k; move to top
        -:  381:  //Next player draws hand
    #####:  382:  for (k = 0; k < 5; k++){
    #####:  383:    drawCard(state->whoseTurn, state);//Draw a card
        -:  384:  }
        -:  385:
        -:  386:  //Update money
    #####:  387:  updateCoins(state->whoseTurn, state , 0);
        -:  388:
    #####:  389:  return 0;
        -:  390:}
        -:  391:
    #####:  392:int isGameOver(struct gameState *state) {
        -:  393:  int i;
        -:  394:  int j;
        -:  395:
        -:  396:  //if stack of Province cards is empty, the game ends
    #####:  397:  if (state->supplyCount[province] == 0)
        -:  398:    {
    #####:  399:      return 1;
        -:  400:    }
        -:  401:
        -:  402:  //if three supply pile are at 0, the game ends
    #####:  403:  j = 0;
    #####:  404:  for (i = 0; i < 25; i++)
        -:  405:    {
    #####:  406:      if (state->supplyCount[i] == 0)
        -:  407:	{
    #####:  408:	  j++;
        -:  409:	}
        -:  410:    }
    #####:  411:  if ( j >= 3)
        -:  412:    {
    #####:  413:      return 1;
        -:  414:    }
        -:  415:
    #####:  416:  return 0;
        -:  417:}
        -:  418:
       11:  419:int scoreFor (int player, struct gameState *state) {
        -:  420:
        -:  421:  int i;
       11:  422:  int score = 0;
        -:  423:  //score from hand
       57:  424:  for (i = 0; i < state->handCount[player]; i++)
        -:  425:    {
       46:  426:      if (state->hand[player][i] == curse) { score = score - 1; };
       46:  427:      if (state->hand[player][i] == estate) { score = score + 1; };
       46:  428:      if (state->hand[player][i] == duchy) { score = score + 3; };
       46:  429:      if (state->hand[player][i] == province) { score = score + 6; };
       46:  430:      if (state->hand[player][i] == great_hall) { score = score + 1; };
       46:  431:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  432:    }
        -:  433:
        -:  434:  //score from discard
       22:  435:  for (i = 0; i < state->discardCount[player]; i++)
        -:  436:    {
       11:  437:      if (state->discard[player][i] == curse) { score = score - 1; };
       11:  438:      if (state->discard[player][i] == estate) { score = score + 1; };
       11:  439:      if (state->discard[player][i] == duchy) { score = score + 3; };
       11:  440:      if (state->discard[player][i] == province) { score = score + 6; };
       11:  441:      if (state->discard[player][i] == great_hall) { score = score + 1; };
       11:  442:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  443:    }
        -:  444:
        -:  445:  //score from deck
       22:  446:  for (i = 0; i < state->discardCount[player]; i++)
        -:  447:    {
       11:  448:      if (state->deck[player][i] == curse) { score = score - 1; };
       11:  449:      if (state->deck[player][i] == estate) { score = score + 1; };
       11:  450:      if (state->deck[player][i] == duchy) { score = score + 3; };
       11:  451:      if (state->deck[player][i] == province) { score = score + 6; };
       11:  452:      if (state->deck[player][i] == great_hall) { score = score + 1; };
       11:  453:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  454:    }
        -:  455:
       11:  456:  return score;
        -:  457:}
        -:  458:
    #####:  459:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  460:  int i;
        -:  461:  int j;
        -:  462:  int highScore;
        -:  463:  int currentPlayer;
        -:  464:
        -:  465:  //get score for each player
    #####:  466:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  467:    {
        -:  468:      //set unused player scores to -9999
    #####:  469:      if (i >= state->numPlayers)
        -:  470:	{
    #####:  471:	  players[i] = -9999;
        -:  472:	}
        -:  473:      else
        -:  474:	{
    #####:  475:	  players[i] = scoreFor (i, state);
        -:  476:	}
        -:  477:    }
        -:  478:
        -:  479:  //find highest score
    #####:  480:  j = 0;
    #####:  481:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  482:    {
    #####:  483:      if (players[i] > players[j])
        -:  484:	{
    #####:  485:	  j = i;
        -:  486:	}
        -:  487:    }
    #####:  488:  highScore = players[j];
        -:  489:
        -:  490:  //add 1 to players who had less turns
    #####:  491:  currentPlayer = whoseTurn(state);
    #####:  492:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  493:    {
    #####:  494:      if ( players[i] == highScore && i > currentPlayer )
        -:  495:	{
    #####:  496:	  players[i]++;
        -:  497:	}
        -:  498:    }
        -:  499:
        -:  500:  //find new highest score
    #####:  501:  j = 0;
    #####:  502:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  503:    {
    #####:  504:      if ( players[i] > players[j] )
        -:  505:	{
    #####:  506:	  j = i;
        -:  507:	}
        -:  508:    }
    #####:  509:  highScore = players[j];
        -:  510:
        -:  511:  //set winners in array to 1 and rest to 0
    #####:  512:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  513:    {
    #####:  514:      if ( players[i] == highScore )
        -:  515:	{
    #####:  516:	  players[i] = 1;
        -:  517:	}
        -:  518:      else
        -:  519:	{
    #####:  520:	  players[i] = 0;
        -:  521:	}
        -:  522:    }
        -:  523:
    #####:  524:  return 0;
        -:  525:}
        -:  526:
       25:  527:int drawCard(int player, struct gameState *state)
        -:  528:{	int count;
        -:  529:  int deckCounter;
       25:  530:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  531:
        -:  532:    //Step 1 Shuffle the discard pile back into a deck
        -:  533:    int i;
        -:  534:    //Move discard to deck
    #####:  535:    for (i = 0; i < state->discardCount[player];i++){
    #####:  536:      state->deck[player][i] = state->discard[player][i];
    #####:  537:      state->discard[player][i] = -1;
        -:  538:    }
        -:  539:
    #####:  540:    state->deckCount[player] = state->discardCount[player];
    #####:  541:    state->discardCount[player] = 0;//Reset discard
        -:  542:
        -:  543:    //Shufffle the deck
    #####:  544:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  545:
        -:  546:    if (DEBUG){//Debug statements
        -:  547:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  548:    }
        -:  549:
    #####:  550:    state->discardCount[player] = 0;
        -:  551:
        -:  552:    //Step 2 Draw Card
    #####:  553:    count = state->handCount[player];//Get current player's hand count
        -:  554:
        -:  555:    if (DEBUG){//Debug statements
        -:  556:      printf("Current hand count: %d\n", count);
        -:  557:    }
        -:  558:
    #####:  559:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  560:
    #####:  561:    if (deckCounter == 0)
    #####:  562:      return -1;
        -:  563:
    #####:  564:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  565:    state->deckCount[player]--;
    #####:  566:    state->handCount[player]++;//Increment hand count
        -:  567:  }
        -:  568:
        -:  569:  else{
       25:  570:    int count = state->handCount[player];//Get current hand count for player
        -:  571:    int deckCounter;
        -:  572:    if (DEBUG){//Debug statements
        -:  573:      printf("Current hand count: %d\n", count);
        -:  574:    }
        -:  575:
       25:  576:    deckCounter = state->deckCount[player];//Create holder for the deck count
       25:  577:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       25:  578:    state->deckCount[player]--;
       25:  579:    state->handCount[player]++;//Increment hand count
        -:  580:  }
        -:  581:
       25:  582:  return 0;
        -:  583:}
        -:  584:
    #####:  585:int getCost(int cardNumber)
        -:  586:{
    #####:  587:  switch( cardNumber )
        -:  588:    {
        -:  589:    case curse:
    #####:  590:      return 0;
        -:  591:    case estate:
    #####:  592:      return 2;
        -:  593:    case duchy:
    #####:  594:      return 5;
        -:  595:    case province:
    #####:  596:      return 8;
        -:  597:    case copper:
    #####:  598:      return 0;
        -:  599:    case silver:
    #####:  600:      return 3;
        -:  601:    case gold:
    #####:  602:      return 6;
        -:  603:    case adventurer:
    #####:  604:      return 6;
        -:  605:    case council_room:
    #####:  606:      return 5;
        -:  607:    case feast:
    #####:  608:      return 4;
        -:  609:    case gardens:
    #####:  610:      return 4;
        -:  611:    case mine:
    #####:  612:      return 5;
        -:  613:    case remodel:
    #####:  614:      return 4;
        -:  615:    case smithy:
    #####:  616:      return 4;
        -:  617:    case village:
    #####:  618:      return 3;
        -:  619:    case baron:
    #####:  620:      return 4;
        -:  621:    case great_hall:
    #####:  622:      return 3;
        -:  623:    case minion:
    #####:  624:      return 5;
        -:  625:    case steward:
    #####:  626:      return 3;
        -:  627:    case tribute:
    #####:  628:      return 5;
        -:  629:    case ambassador:
    #####:  630:      return 3;
        -:  631:    case cutpurse:
    #####:  632:      return 4;
        -:  633:    case embargo:
    #####:  634:      return 2;
        -:  635:    case outpost:
    #####:  636:      return 5;
        -:  637:    case salvager:
    #####:  638:      return 4;
        -:  639:    case sea_hag:
    #####:  640:      return 4;
        -:  641:    case treasure_map:
    #####:  642:      return 4;
        -:  643:    }
        -:  644:
    #####:  645:  return -1;
        -:  646:}
        -:  647:
        -:  648://<<<<<<< HEAD
        -:  649://TERA!!!
        -:  650://assignemnt 2 REFACTOR HERE !!!!
        -:  651://=======
        -:  652://assignemnt 2
        -:  653://refactor code in cardEffect
        -:  654://>>>>>>> a625878115922eeab1e28fa87e0eee8c0ee01245
        4:  655:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  656:{
        -:  657:  int i;
        -:  658:  int j;
        -:  659:  int k;
        -:  660:  int x;
        -:  661:  int index;
        4:  662:  int currentPlayer = whoseTurn(state);
        4:  663:  int nextPlayer = currentPlayer + 1;
        -:  664:
        4:  665:  int tributeRevealedCards[2] = {-1, -1};
        -:  666:  int temphand[MAX_HAND];// moved above the if statement
        4:  667:  int drawntreasure=0;
        -:  668:  int cardDrawn;
        4:  669:  int z = 0;// this is the counter for the temp hand
        4:  670:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  671:    nextPlayer = 0;
        -:  672:  }
        -:  673:
        -:  674:
        -:  675:  //uses switch to select card and perform actions
        4:  676:  switch( card )
        -:  677:    {
        -:  678:    case adventurer:
        1:  679:      return adventurerEffect(state);
        -:  680:
        -:  681:    case council_room:
        -:  682:      //+4 Cards
    #####:  683:      for (i = 0; i < 4; i++)
        -:  684:	{
    #####:  685:	  drawCard(currentPlayer, state);
        -:  686:	}
        -:  687:
        -:  688:      //+1 Buy
    #####:  689:      state->numBuys++;
        -:  690:
        -:  691:      //Each other player draws a card
    #####:  692:      for (i = 0; i < state->numPlayers; i++)
        -:  693:	{
    #####:  694:	  if ( i != currentPlayer )
        -:  695:	    {
    #####:  696:	      drawCard(i, state);
        -:  697:	    }
        -:  698:	}
        -:  699:
        -:  700:      //put played card in played card pile
    #####:  701:      discardCard(handPos, currentPlayer, state, 0);
        -:  702:
    #####:  703:      return 0;
        -:  704:
        -:  705:    case feast:
        -:  706:      //gain card with cost up to 5
        -:  707:      //Backup hand
    #####:  708:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  709:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  710:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  711:      }
        -:  712:      //Backup hand
        -:  713:
        -:  714:      //Update Coins for Buy
    #####:  715:      updateCoins(currentPlayer, state, 5);
    #####:  716:      x = 1;//Condition to loop on
    #####:  717:      while( x == 1) {//Buy one card
    #####:  718:	if (supplyCount(choice1, state) <= 0){
        -:  719:	  if (DEBUG)
        -:  720:	    printf("None of that card left, sorry!\n");
        -:  721:
        -:  722:	  if (DEBUG){
        -:  723:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  724:	  }
        -:  725:	}
    #####:  726:	else if (state->coins < getCost(choice1)){
    #####:  727:	  printf("That card is too expensive!\n");
        -:  728:
        -:  729:	  if (DEBUG){
        -:  730:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  731:	  }
        -:  732:	}
        -:  733:	else{
        -:  734:
        -:  735:	  if (DEBUG){
        -:  736:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  737:	  }
        -:  738:
    #####:  739:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  740:	  x = 0;//No more buying cards
        -:  741:
        -:  742:	  if (DEBUG){
        -:  743:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  744:	  }
        -:  745:
        -:  746:	}
        -:  747:      }
        -:  748:
        -:  749:      //Reset Hand
    #####:  750:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  751:	state->hand[currentPlayer][i] = temphand[i];
    #####:  752:	temphand[i] = -1;
        -:  753:      }
        -:  754:      //Reset Hand
        -:  755:
    #####:  756:      return 0;
        -:  757:
        -:  758:    case gardens:
    #####:  759:      return -1;
        -:  760:
        -:  761:    case mine:
    #####:  762:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  763:
    #####:  764:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  765:	{
    #####:  766:	  return -1;
        -:  767:	}
        -:  768:
    #####:  769:      if (choice2 > treasure_map || choice2 < curse)
        -:  770:	{
    #####:  771:	  return -1;
        -:  772:	}
        -:  773:
    #####:  774:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  775:	{
    #####:  776:	  return -1;
        -:  777:	}
        -:  778:
    #####:  779:      gainCard(choice2, state, 2, currentPlayer);
        -:  780:
        -:  781:      //discard card from hand
    #####:  782:      discardCard(handPos, currentPlayer, state, 0);
        -:  783:
        -:  784:      //discard trashed card
    #####:  785:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  786:	{
    #####:  787:	  if (state->hand[currentPlayer][i] == j)
        -:  788:	    {
    #####:  789:	      discardCard(i, currentPlayer, state, 0);
    #####:  790:	      break;
        -:  791:	    }
        -:  792:	}
        -:  793:
    #####:  794:      return 0;
        -:  795:
        -:  796:    case remodel:
    #####:  797:      return remodelEffect(state, handPos, choice1, choice2);
        -:  798:
        -:  799:    case smithy:
        1:  800:      return smithyEffect(state, handPos);
        -:  801:
        -:  802:    case village:
        1:  803:      return villageEffect(state, handPos);
        -:  804:
        -:  805:    case baron:
    #####:  806:      state->numBuys++;//Increase buys by 1!
    #####:  807:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  808:	int p = 0;//Iterator for hand!
    #####:  809:	int card_not_discarded = 1;//Flag for discard set!
    #####:  810:	while(card_not_discarded){
    #####:  811:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  812:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  813:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  814:	    state->discardCount[currentPlayer]++;
    #####:  815:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  816:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  817:	    }
    #####:  818:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  819:	    state->handCount[currentPlayer]--;
    #####:  820:	    card_not_discarded = 0;//Exit the loop
        -:  821:	  }
    #####:  822:	  else if (p > state->handCount[currentPlayer]){
        -:  823:	    if(DEBUG) {
        -:  824:	      printf("No estate cards in your hand, invalid choice\n");
        -:  825:	      printf("Must gain an estate if there are any\n");
        -:  826:	    }
    #####:  827:	    if (supplyCount(estate, state) > 0){
    #####:  828:	      gainCard(estate, state, 0, currentPlayer);
    #####:  829:	      state->supplyCount[estate]--;//Decrement estates
    #####:  830:	      if (supplyCount(estate, state) == 0){
    #####:  831:		isGameOver(state);
        -:  832:	      }
        -:  833:	    }
    #####:  834:	    card_not_discarded = 0;//Exit the loop
        -:  835:	  }
        -:  836:
        -:  837:	  else{
    #####:  838:	    p++;//Next card
        -:  839:	  }
        -:  840:	}
        -:  841:      }
        -:  842:
        -:  843:      else{
    #####:  844:	if (supplyCount(estate, state) > 0){
    #####:  845:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  846:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  847:	  if (supplyCount(estate, state) == 0){
    #####:  848:	    isGameOver(state);
        -:  849:	  }
        -:  850:	}
        -:  851:      }
        -:  852:
        -:  853:
    #####:  854:      return 0;
        -:  855:
        -:  856:    case great_hall:
        -:  857:      //+1 Card
    #####:  858:      drawCard(currentPlayer, state);
        -:  859:
        -:  860:      //+1 Actions
    #####:  861:      state->numActions++;
        -:  862:
        -:  863:      //discard card from hand
    #####:  864:      discardCard(handPos, currentPlayer, state, 0);
    #####:  865:      return 0;
        -:  866:
        -:  867:    case minion:
        -:  868:      //+1 action
    #####:  869:      state->numActions++;
        -:  870:
        -:  871:      //discard card from hand
    #####:  872:      discardCard(handPos, currentPlayer, state, 0);
        -:  873:
    #####:  874:      if (choice1)		//+2 coins
        -:  875:	{
    #####:  876:	  state->coins = state->coins + 2;
        -:  877:	}
        -:  878:
    #####:  879:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  880:	{
        -:  881:	  //discard hand
    #####:  882:	  while(numHandCards(state) > 0)
        -:  883:	    {
    #####:  884:	      discardCard(handPos, currentPlayer, state, 0);
        -:  885:	    }
        -:  886:
        -:  887:	  //draw 4
    #####:  888:	  for (i = 0; i < 4; i++)
        -:  889:	    {
    #####:  890:	      drawCard(currentPlayer, state);
        -:  891:	    }
        -:  892:
        -:  893:	  //other players discard hand and redraw if hand size > 4
    #####:  894:	  for (i = 0; i < state->numPlayers; i++)
        -:  895:	    {
    #####:  896:	      if (i != currentPlayer)
        -:  897:		{
    #####:  898:		  if ( state->handCount[i] > 4 )
        -:  899:		    {
        -:  900:		      //discard hand
    #####:  901:		      while( state->handCount[i] > 0 )
        -:  902:			{
    #####:  903:			  discardCard(handPos, i, state, 0);
        -:  904:			}
        -:  905:
        -:  906:		      //draw 4
    #####:  907:		      for (j = 0; j < 4; j++)
        -:  908:			{
    #####:  909:			  drawCard(i, state);
        -:  910:			}
        -:  911:		    }
        -:  912:		}
        -:  913:	    }
        -:  914:
        -:  915:	}
    #####:  916:      return 0;
        -:  917:
        -:  918:    case steward:
    #####:  919:      if (choice1 == 1)
        -:  920:	{
        -:  921:	  //+2 cards
    #####:  922:	  drawCard(currentPlayer, state);
    #####:  923:	  drawCard(currentPlayer, state);
        -:  924:	}
    #####:  925:      else if (choice1 == 2)
        -:  926:	{
        -:  927:	  //+2 coins
    #####:  928:	  state->coins = state->coins + 2;
        -:  929:	}
        -:  930:      else
        -:  931:	{
        -:  932:	  //trash 2 cards in hand
    #####:  933:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  934:	  discardCard(choice3, currentPlayer, state, 1);
        -:  935:	}
        -:  936:
        -:  937:      //discard card from hand
    #####:  938:      discardCard(handPos, currentPlayer, state, 0);
    #####:  939:      return 0;
        -:  940:
        -:  941:    case tribute:
    #####:  942:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  943:	if (state->deckCount[nextPlayer] > 0){
    #####:  944:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  945:	  state->deckCount[nextPlayer]--;
        -:  946:	}
    #####:  947:	else if (state->discardCount[nextPlayer] > 0){
    #####:  948:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  949:	  state->discardCount[nextPlayer]--;
        -:  950:	}
        -:  951:	else{
        -:  952:	  //No Card to Reveal
        -:  953:	  if (DEBUG){
        -:  954:	    printf("No cards to reveal\n");
        -:  955:	  }
        -:  956:	}
        -:  957:      }
        -:  958:
        -:  959:      else{
    #####:  960:	if (state->deckCount[nextPlayer] == 0){
    #####:  961:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  962:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  963:	    state->deckCount[nextPlayer]++;
    #####:  964:	    state->discard[nextPlayer][i] = -1;
    #####:  965:	    state->discardCount[nextPlayer]--;
        -:  966:	  }
        -:  967:
    #####:  968:	  shuffle(nextPlayer,state);//Shuffle the deck
        -:  969:	}
    #####:  970:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  971:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  972:	state->deckCount[nextPlayer]--;
    #####:  973:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  974:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  975:	state->deckCount[nextPlayer]--;
        -:  976:      }
        -:  977:
    #####:  978:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
    #####:  979:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  980:	state->playedCardCount++;
    #####:  981:	tributeRevealedCards[1] = -1;
        -:  982:      }
        -:  983:
    #####:  984:      for (i = 0; i <= 2; i ++){
    #####:  985:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####:  986:	  state->coins += 2;
        -:  987:	}
        -:  988:
    #####:  989:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####:  990:	  drawCard(currentPlayer, state);
    #####:  991:	  drawCard(currentPlayer, state);
        -:  992:	}
        -:  993:	else{//Action Card
    #####:  994:	  state->numActions = state->numActions + 2;
        -:  995:	}
        -:  996:      }
        -:  997:
    #####:  998:      return 0;
        -:  999:
        -: 1000:    case ambassador:
    #####: 1001:      j = 0;		//used to check if player has enough cards to discard
        -: 1002:
    #####: 1003:      if (choice2 > 2 || choice2 < 0)
        -: 1004:	{
    #####: 1005:	  return -1;
        -: 1006:	}
        -: 1007:
    #####: 1008:      if (choice1 == handPos)
        -: 1009:	{
    #####: 1010:	  return -1;
        -: 1011:	}
        -: 1012:
    #####: 1013:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1014:	{
    #####: 1015:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1016:	    {
    #####: 1017:	      j++;
        -: 1018:	    }
        -: 1019:	}
    #####: 1020:      if (j < choice2)
        -: 1021:	{
    #####: 1022:	  return -1;
        -: 1023:	}
        -: 1024:
        -: 1025:      if (DEBUG)
        -: 1026:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1027:
        -: 1028:      //increase supply count for choosen card by amount being discarded
    #####: 1029:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1030:
        -: 1031:      //each other player gains a copy of revealed card
    #####: 1032:      for (i = 0; i < state->numPlayers; i++)
        -: 1033:	{
    #####: 1034:	  if (i != currentPlayer)
        -: 1035:	    {
    #####: 1036:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1037:	    }
        -: 1038:	}
        -: 1039:
        -: 1040:      //discard played card from hand
    #####: 1041:      discardCard(handPos, currentPlayer, state, 0);
        -: 1042:
        -: 1043:      //trash copies of cards returned to supply
    #####: 1044:      for (j = 0; j < choice2; j++)
        -: 1045:	{
    #####: 1046:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1047:	    {
    #####: 1048:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1049:		{
    #####: 1050:		  discardCard(i, currentPlayer, state, 1);
    #####: 1051:		  break;
        -: 1052:		}
        -: 1053:	    }
        -: 1054:	}
        -: 1055:
    #####: 1056:      return 0;
        -: 1057:
        -: 1058:    case cutpurse:
        -: 1059:
    #####: 1060:      updateCoins(currentPlayer, state, 2);
    #####: 1061:      for (i = 0; i < state->numPlayers; i++)
        -: 1062:	{
    #####: 1063:	  if (i != currentPlayer)
        -: 1064:	    {
    #####: 1065:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1066:		{
    #####: 1067:		  if (state->hand[i][j] == copper)
        -: 1068:		    {
    #####: 1069:		      discardCard(j, i, state, 0);
    #####: 1070:		      break;
        -: 1071:		    }
    #####: 1072:		  if (j == state->handCount[i])
        -: 1073:		    {
    #####: 1074:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1075:			{
        -: 1076:			  if (DEBUG)
        -: 1077:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1078:			}
    #####: 1079:		      break;
        -: 1080:		    }
        -: 1081:		}
        -: 1082:
        -: 1083:	    }
        -: 1084:
        -: 1085:	}
        -: 1086:
        -: 1087:      //discard played card from hand
    #####: 1088:      discardCard(handPos, currentPlayer, state, 0);
        -: 1089:
    #####: 1090:      return 0;
        -: 1091:
        -: 1092:
        -: 1093:    case embargo:
        -: 1094:      //+2 Coins
    #####: 1095:      state->coins = state->coins + 2;
        -: 1096:
        -: 1097:      //see if selected pile is in play
    #####: 1098:      if ( state->supplyCount[choice1] == -1 )
        -: 1099:	{
    #####: 1100:	  return -1;
        -: 1101:	}
        -: 1102:
        -: 1103:      //add embargo token to selected supply pile
    #####: 1104:      state->embargoTokens[choice1]++;
        -: 1105:
        -: 1106:      //trash card
    #####: 1107:      discardCard(handPos, currentPlayer, state, 1);
    #####: 1108:      return 0;
        -: 1109:
        -: 1110:    case outpost:
        -: 1111:      //set outpost flag
    #####: 1112:      state->outpostPlayed++;
        -: 1113:
        -: 1114:      //discard card
    #####: 1115:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1116:      return 0;
        -: 1117:
        -: 1118:    case salvager:
        -: 1119:      //+1 buy
    #####: 1120:      state->numBuys++;
        -: 1121:
    #####: 1122:      if (choice1)
        -: 1123:	{
        -: 1124:	  //gain coins equal to trashed card
    #####: 1125:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1126:	  //trash card
    #####: 1127:	  discardCard(choice1, currentPlayer, state, 1);
        -: 1128:	}
        -: 1129:
        -: 1130:      //discard card
    #####: 1131:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1132:      return 0;
        -: 1133:
        -: 1134:    case sea_hag:
        1: 1135:      return sea_hagEffect(state);
        -: 1136:
        -: 1137:    case treasure_map:
        -: 1138:      //search hand for another treasure_map
    #####: 1139:      index = -1;
    #####: 1140:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1141:	{
    #####: 1142:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1143:	    {
    #####: 1144:	      index = i;
    #####: 1145:	      break;
        -: 1146:	    }
        -: 1147:	}
    #####: 1148:      if (index > -1)
        -: 1149:	{
        -: 1150:	  //trash both treasure cards
    #####: 1151:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1152:	  discardCard(index, currentPlayer, state, 1);
        -: 1153:
        -: 1154:	  //gain 4 Gold cards
    #####: 1155:	  for (i = 0; i < 4; i++)
        -: 1156:	    {
    #####: 1157:	      gainCard(gold, state, 1, currentPlayer);
        -: 1158:	    }
        -: 1159:
        -: 1160:	  //return success
    #####: 1161:	  return 1;
        -: 1162:	}
        -: 1163:
        -: 1164:      //no second treasure_map found in hand
    #####: 1165:      return -1;
        -: 1166:    }
        -: 1167:
    #####: 1168:  return -1;
        -: 1169:}
        -: 1170:
        2: 1171:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1172:{
        -: 1173:
        -: 1174:  //if card is not trashed, added to Played pile
        2: 1175:  if (trashFlag < 1)
        -: 1176:    {
        -: 1177:      //add card to played pile
        2: 1178:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
        2: 1179:      state->playedCardCount++;
        -: 1180:    }
        -: 1181:
        -: 1182:  //set played card to -1
        2: 1183:  state->hand[currentPlayer][handPos] = -1;
        -: 1184:
        -: 1185:  //remove card from player's hand
        2: 1186:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1187:    {
        -: 1188:      //reduce number of cards in hand
    #####: 1189:      state->handCount[currentPlayer]--;
        -: 1190:    }
        2: 1191:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1192:    {
        -: 1193:      //reduce number of cards in hand
    #####: 1194:      state->handCount[currentPlayer]--;
        -: 1195:    }
        -: 1196:  else
        -: 1197:    {
        -: 1198:      //replace discarded card with last card in hand
        2: 1199:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1200:      //set last card to -1
        2: 1201:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1202:      //reduce number of cards in hand
        2: 1203:      state->handCount[currentPlayer]--;
        -: 1204:    }
        -: 1205:
        2: 1206:  return 0;
        -: 1207:}
        -: 1208:
    #####: 1209:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1210:{
        -: 1211:  //Note: supplyPos is enum of choosen card
        -: 1212:
        -: 1213:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1214:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1215:    {
    #####: 1216:      return -1;
        -: 1217:    }
        -: 1218:
        -: 1219:  //added card for [whoseTurn] current player:
        -: 1220:  // toFlag = 0 : add to discard
        -: 1221:  // toFlag = 1 : add to deck
        -: 1222:  // toFlag = 2 : add to hand
        -: 1223:
    #####: 1224:  if (toFlag == 1)
        -: 1225:    {
    #####: 1226:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1227:      state->deckCount[player]++;
        -: 1228:    }
    #####: 1229:  else if (toFlag == 2)
        -: 1230:    {
    #####: 1231:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1232:      state->handCount[player]++;
        -: 1233:    }
        -: 1234:  else
        -: 1235:    {
    #####: 1236:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1237:      state->discardCount[player]++;
        -: 1238:    }
        -: 1239:
        -: 1240:  //decrease number in supply pile
    #####: 1241:  state->supplyCount[supplyPos]--;
        -: 1242:
    #####: 1243:  return 0;
        -: 1244:}
        -: 1245:
       11: 1246:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1247:{
        -: 1248:  int i;
        -: 1249:
        -: 1250:  //reset coin count
       11: 1251:  state->coins = 0;
        -: 1252:
        -: 1253:  //add coins for each Treasure card in player's hand
       91: 1254:  for (i = 0; i < state->handCount[player]; i++)
        -: 1255:    {
       80: 1256:      if (state->hand[player][i] == copper)
        -: 1257:	{
       36: 1258:	  state->coins += 1;
        -: 1259:	}
       44: 1260:      else if (state->hand[player][i] == silver)
        -: 1261:	{
       20: 1262:	  state->coins += 2;
        -: 1263:	}
       24: 1264:      else if (state->hand[player][i] == gold)
        -: 1265:	{
       20: 1266:	  state->coins += 3;
        -: 1267:	}
        -: 1268:    }
        -: 1269:
        -: 1270:  //add bonus
       11: 1271:  state->coins += bonus;
        -: 1272:
       11: 1273:  return 0;
        -: 1274:}
        -: 1275:
        -: 1276:/*************************************************************************
        -: 1277://Terezie (Tera) Schaller: assignment 2 functions
        -: 1278://January 24, 2019
        -: 1279://CS 362, WINTER 2019
        -: 1280://refactored functions
        -: 1281://derived from switch statement code
        -: 1282:
        -: 1283://REFERENCES
        -: 1284://https://superuser.com/questions/340471/how-can-i-merge-two-branches-without-losing-any-files
        -: 1285://https://www.youtube.com/watch?v=FyAAIHHClqI
        -: 1286:**************************************************************************/
        -: 1287:
        -: 1288:/*************************************************************************
        -: 1289:** FUNCTION: adventurerEffect
        -: 1290:** DESCRIPTION: draws cards from the player's deck until 2 treasure cards are Found
        -: 1291:** Treasure cards are added to hand and other cards are discarded
        -: 1292:** PARAMETERS: struct gameState *state
        -: 1293:** PRECONDITION: valid game in play
        -: 1294:** POSTCONDITION: player's deck and hand altered
        -: 1295:**************************************************************************/
        1: 1296:int adventurerEffect(struct gameState *state){
        -: 1297:  //first initialize some variables
        1: 1298:  int drawntreasure = 0;
        1: 1299:  int currentPlayer = whoseTurn(state);
        -: 1300:  int cardDrawn;
        -: 1301:  int temphand[MAX_HAND];
        1: 1302:  int z = 0;
        -: 1303:
        -: 1304:  //code from switch statement
        4: 1305:  while(drawntreasure<2){
        2: 1306:    if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####: 1307:      shuffle(currentPlayer, state);
        -: 1308:    }
        2: 1309:    drawCard(currentPlayer, state);
        2: 1310:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        2: 1311:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        2: 1312:      drawntreasure++;
        -: 1313:      else{
    #####: 1314:        temphand[z]=cardDrawn;
    #####: 1315:        state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####: 1316:        z++;
        -: 1317:      }
        -: 1318:    }
        2: 1319:  while(z-1>=0){
    #####: 1320:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####: 1321:    z=z-1;
        -: 1322:  }
        1: 1323:  return 0;
        -: 1324:} //end adventurerEffect
        -: 1325:
        -: 1326:/*************************************************************************
        -: 1327:** FUNCTION: smithyEffect
        -: 1328:** DESCRIPTION: draws 3 cards from the deck and adds them to the player's hand
        -: 1329:** PARAMETERS: truct gameState *state, int handPos
        -: 1330:** PRECONDITION: valid game and current player
        -: 1331:** POSTCONDITION: player's hand is increased by three
        -: 1332:**************************************************************************/
        -: 1333:
        -: 1334://smithyEffect
        1: 1335:int smithyEffect(struct gameState *state, int handPos){
        -: 1336:  //initilize local variables
        1: 1337:  int currentPlayer = whoseTurn(state);
        -: 1338:  //code from switch statement
        -: 1339:  //+3 Cards
        3: 1340:  for (int i = 1; i < 3; i++)
        -: 1341:  {
        2: 1342:    drawCard(currentPlayer, state);
        -: 1343:  }
        -: 1344:
        -: 1345:  //discard card from hand
        1: 1346:  discardCard(handPos, currentPlayer, state, 0);
        1: 1347:  return 0;
        -: 1348:}
        -: 1349:
        -: 1350:/*************************************************************************
        -: 1351:** FUNCTION: villageEffect
        -: 1352:** DESCRIPTION: draws 1 card, adds 2 additional actions
        -: 1353:** PARAMETERS: struct gameState *state, int handPos
        -: 1354:** PRECONDITION: valid game
        -: 1355:** POSTCONDITION: player's hand increased by one, actions by 2
        -: 1356:**************************************************************************/
        -: 1357:
        -: 1358://choice card 1 - village
        1: 1359:int villageEffect(struct gameState *state, int handPos){
        -: 1360:  //initilize local variables
        1: 1361:  int currentPlayer = whoseTurn(state);
        -: 1362:  //code from switch statement
        1: 1363:  drawCard(currentPlayer, state);
        -: 1364:
        -: 1365:  //+2 Actions
        1: 1366:  state->numActions = 2;
        -: 1367:
        -: 1368:  //discard played card from hand
        1: 1369:  discardCard(handPos, currentPlayer, state, 0);
        1: 1370:  return 0;
        -: 1371:
        -: 1372:}
        -: 1373:
        -: 1374:/*************************************************************************
        -: 1375:** FUNCTION: remodelEffect
        -: 1376:** DESCRIPTION: permanently discard a card from the player's hand and allow
        -: 1377:** player to select a new card worht up to +2 the value of the discarded card
        -: 1378:** PARAMETERS: struct gameState *state, int handPos, int choice1, int choice2
        -: 1379:** PRECONDITION: active game, 2 cards chosen
        -: 1380:** POSTCONDITION: hand is altered to replace trashed card with new card
        -: 1381:**************************************************************************/
        -: 1382:
        -: 1383://choice card 2 - remodel
    #####: 1384:int remodelEffect(struct gameState *state, int handPos, int choice1, int choice2){
        -: 1385:  //initilize local variables
    #####: 1386:  int currentPlayer = whoseTurn(state);
        -: 1387:
        -: 1388:  //code from switch statement
    #####: 1389:  int j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1390:
    #####: 1391:  if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -: 1392:  {
    #####: 1393:    return -1;
        -: 1394:  }
        -: 1395:
    #####: 1396:  gainCard(choice2, state, 0, currentPlayer);
        -: 1397:
        -: 1398:  //discard card from hand
    #####: 1399:  discardCard(handPos, currentPlayer, state, 0);
        -: 1400:
        -: 1401:  //discard trashed card
    #####: 1402:  for (int i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1403:  {
    #####: 1404:    if (state->hand[currentPlayer][i] == j)
        -: 1405:    {
    #####: 1406:      discardCard(i, currentPlayer, state, 0);
    #####: 1407:      break;
        -: 1408:    }
        -: 1409:  }
    #####: 1410:  return 0;
        -: 1411:
        -: 1412:}
        -: 1413:
        -: 1414:/*************************************************************************
        -: 1415:** FUNCTION: sea_hagEffect
        -: 1416:** DESCRIPTION: for every other player, removes the top card on their deck
        -: 1417:** and replaces it with a curse
        -: 1418:** PARAMETERS: struct gameState *state
        -: 1419:** PRECONDITION: valid game state
        -: 1420:** POSTCONDITION: all other players have a curse as the top card on their deck
        -: 1421:**************************************************************************/
        -: 1422:
        -: 1423://choice card 3 - sea_hag
        1: 1424:int sea_hagEffect(struct gameState *state){
        -: 1425:  //initilize local variables
        1: 1426:  int currentPlayer = whoseTurn(state);
        -: 1427:  //switch statement code
        3: 1428:  for (int i = 0; i < state->numPlayers; i++){
        2: 1429:    if (i != currentPlayer){
        1: 1430:      state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
        1: 1431:      state->deckCount[i]--;
        1: 1432:      state->discardCount[i]++;
        1: 1433:      state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1434:    }
        -: 1435:  }
        1: 1436:  return 0;
        -: 1437:}
        -: 1438:
        -: 1439://end Tera's assignment 2 functions
        -: 1440:
        -: 1441://end of dominion.c
